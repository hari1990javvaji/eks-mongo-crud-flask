# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # workflow_dispatch:
  #   inputs:
  #     name:
  #       description: "Test"
  #       default: "Helm"

  #workflow_dispatch: 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  image-build-push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: docker-image-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'hari1990javvaji'
    env:
      IMAGE_NAME: flask-mongo-crud
      IMAGE_TAG: ${{ github.run_number }} # $GITHUB_RUN_NUMBER

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Git Checkout 
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: ./app/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{secrets.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

   
  deploy-staging:
    runs-on: ubuntu-latest
    needs: image-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'hari1990javvaji'
    name: Deploy-to-staging
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Image Name update
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.flask.image.name = "${{secrets.DOCKERHUB_USERNAME}}/flask-mongo-crud"' -i ./flask-mongodb-app/values.yaml
      - name: Docker username creds update
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.imageCredentials.username = "${{secrets.DOCKERHUB_USERNAME}}"' -i ./flask-mongodb-app/values.yaml
      - name: Docker password creds update
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.imageCredentials.password = "${{secrets.DOCKERHUB_TOKEN}}"' -i ./flask-mongodb-app/values.yaml
      - name: Image Tag update
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.flask.image.tag = "${{ github.run_number }}"' -i ./flask-mongodb-app/values.yaml
      - name: Mongo root password
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.mongodb.secret.mongorootpassword = "${{ secrets.MONGO_ROOT_PASSWORD }}"' -i ./flask-mongodb-app/values.yaml
      - name: Generate manifest files
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm template crud ./flask-mongodb-app --namespace=systeamcheck --create-namespace --debug=true > ./flask-mongodb-app/argoDeployments/staging/deploy.yaml
      - name:  Apply image name changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Apply image name changes for version ${{ github.run_number }}
 
  notify_status:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
    - name: Check Argo CD sync status
      run: |
        # Insert your script here to check the sync status from Argo CD
        # For example, you can use the Argo CD API to retrieve sync status
        # Replace the following line with your command
        echo "Checking sync status from Argo CD"
        ARGOCD_SERVER="https://argocd.us-east-1-st-next.1e4bd3e413ba6146.hsp.philips.com"
        ARGOCD_APP_NAME="eks-crud-mongo-flask"
        ARGO_LOGIN_USERNAME=${{secrets.ARGO_LOGIN_USERNAME}}
        ARGO_LOGIN_PASSWORD=${{secrets.ARGO_LOGIN_PASSWORD}}
        token=$(curl -sk -L -X POST ${ARGOCD_SERVER}/api/v1/session  -d $'{"username":"'$ARGO_LOGIN_USERNAME'","password": "'$ARGO_LOGIN_PASSWORD'"}'|jq -r .token)
        SYNC_STATUS=$(curl -s -v -k -L -H "Authorization: Bearer $token" "${ARGOCD_SERVER}/api/v1/applications/${ARGOCD_APP_NAME}"| jq -r '.status.sync.status')                                        
        echo "Sync status of $ARGOCD_APP_NAME: $SYNC_STATUS"